<launch>
  <arg name="debug" default="0"/>

  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="-20"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="mode" default="default"/>
  <arg name="namespace" default="rexrov"/>
  <arg name="use_ned_frame" default="false"/>
  <arg name="generated_urdf" default="$(find-pkg-share uuv_descriptions)/robots/generated/$(var namespace)/robot_description"/>
  <arg name="cmd" default= "$(exec-in-pkg xacro xacro) '$(find-pkg-share uuv_descriptions)/robots/rexrov_$(var mode).xacro' 
          > $(find-pkg-share uuv_descriptions)/robots/generated/$(var namespace)/robot_description
          --inorder
          debug:=$(var debug)
          namespace:=$(var namespace)
          inertial_reference_frame:=world_ned"/>
  <arg name="cmdUnless" default="xacro '$(find-pkg-share uuv_descriptions)/robots/rexrov_$(var mode).xacro' 
          > $(find-pkg-share uuv_descriptions)/robots/generated/$(var namespace)/robot_description
          debug:=$(var debug)
          namespace:=$(var namespace)
          inertial_reference_frame:=world"/>
  
  <arg name="use_sim_time" default="true"/>
  

  <group>
    <push-ros-namespace namespace="$(var namespace)"/>
    <group if="$(var use_ned_frame)">
      <executable 
          cmd="$(var cmd)"
          name="robot_description" 
          output="screen" 
          shell="true">
      </executable>
    </group>

    <group unless="$(var use_ned_frame)">
      <executable 
          cmd="$(var cmdUnless)" 
          cwd="$(find-pkg-prefix xacro)"
          name="robot_description" 
          output="screen" 
          shell="true">
      </executable>
    </group>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- <node name="urdf_spawner" pkg="uuv_descriptions" exec="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(var x) -y $(var y) -z $(var z) -R $(var roll) -P $(var pitch) -Y $(var yaw) -model $(var namespace) -file /home/jp/ros2_ws/install/uuv_descriptions/share/uuv_descriptions/robots/generated/rexrov/robot_description"/> -->
    
    <node name="urdf_spawner" pkg="gazebo_ros" exec="spawn_entity.py" respawn="false" output="screen"
          args="-gazebo_namespace /gazebo -x $(var x) -y $(var y) -z $(var z) -R $(var roll) -P $(var pitch) -Y $(var yaw) -entity $(var namespace) -file $(var generated_urdf)"/>

    <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" exec="robot_state_publisher" respawn="true" output="screen"
      args="$(var generated_urdf)">
      <param name="use_sim_time" value="$(var use_sim_time)"/>
      <!-- <param name="robot_description" value="/$(var namespace)/robot_description" />
      <param name="publish_frequency" value="5" /> -->
    </node>
  </group>

  <include file="$(find-pkg-share uuv_assistants)/launch/message_to_tf.launch">
    <arg name="namespace" value="$(var namespace)"/>
    <arg name="world_frame" value="world"/>
    <arg name="child_frame_id" value="/$(var namespace)/base_link"/>
  </include>

</launch>
