<launch>
  <arg name="model_name" />
  <arg name="uuv_name" default="$(var model_name)"/>
  <arg name="base_link" default="base_link" />
  <arg name="timeout" default="-1" />
  <arg name="reset_tam" default="false"/>
  <arg name="output_dir" default="$(find-pkg-share uuv_thruster_manager)/config/$(var model_name)"/>
  <arg name="config_file" default="$(find-pkg-share uuv_thruster_manager)/config/$(var model_name)/thruster_manager.yaml"/>
  <arg name="tam_file" default="$(find-pkg-share uuv_thruster_manager)/config/$(var model_name)/TAM.yaml"/>
  <arg name="urdf_file" default=""/>

  <group>
    <push-ros-namespace namespace="$(var uuv_name)"/>

    <group if="$(var reset_tam)">
      <node pkg="uuv_thruster_manager"
            exec="thruster_allocator.py"
            name="thruster_allocator"
            output="screen">
        <!--FIXME Temp workaround for listener subscribing to relative topic -->
        <remap from="tf" to="/tf"/>
        <param from="$(var config_file)"/>
        <!-- Output directory to store the thruster allocation matrix -->
        <param name="output_dir" value="$(var output_dir)"/>
        <param name="urdf_file" value="$(var urdf_file)"/>    
      </node>
    </group>

    <group unless="$(var reset_tam)">
      <node pkg="uuv_thruster_manager"
            exec="thruster_allocator.py"
            name="thruster_allocator"
            output="screen">
        <!--FIXME Temp workaround for listener subscribing to relative topic -->
        <remap from="tf" to="/tf"/>
        <param from="$(var config_file)"/>
        <!-- Load thruster allocation matrix -->
        <param from="$(var tam_file)"/> 
      </node>
    </group>
    
  </group>

</launch>
