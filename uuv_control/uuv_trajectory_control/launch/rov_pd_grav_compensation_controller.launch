<launch>
  <!-- Vehicle namespace -->
  <arg name="uuv_name"/>
  <!-- Name of the vehicle model -->
  <arg name="model_name" default="$(var uuv_name)"/>
  <!-- Thruster saturation -->
  <arg name="saturation" default="1200"/>
  <!-- Flag to start the trajectory visual markers publisher -->
  <arg name="gui_on" default="true"/>
  <!-- Flag set as true to use load controller the parameters from the file  -->
  <arg name="use_params_file" default="false"/>
  <!--
    Set this flag to true to compute both reference and error vectors wrt
    world_ned frame
  -->
  <arg name="use_ned_frame" default="false"/>

  <!-- If the file is not used, read the parameters from the user input -->
  <!-- Caution: no spaces between the parameter values -->
  <!-- The following controller parameters have been optimized for the RexROV
       vehicle using SMAC (https://github.com/automl/SMAC3)
  -->
  <arg name="Kp" default="11993.888,11993.888,11993.888,19460.069,19460.069,19460.069"/>
  <arg name="Kd" default="9077.459,9077.459,9077.459,18880.925,18880.925,18880.925"/>

  <arg name="controller_config_file" default="$(find-pkg-share uuv_trajectory_control)/config/controllers/pid/$(var model_name)/params.yaml"/>

  <!-- Model parameters -->
  <arg name="model_params_file" default="$(find-pkg-share uuv_trajectory_control)/config/models/$(var model_name)/params.yaml"/>

  <!--Thruster manager configuration  -->
  <arg name="thruster_manager_output_dir" default="$(find-pkg-share uuv_thruster_manager)/config/$(var model_name)"/>
  <arg name="thruster_manager_config_file" default="$(find-pkg-share uuv_thruster_manager)/config/$(var model_name)/thruster_manager.yaml"/>
  <!-- File containing the thruster allocation matrix -->
  <arg name="tam_file" default="$(find-pkg-share uuv_thruster_manager)/config/$(var model_name)/TAM.yaml"/>

  <!-- Start the thruster allocation manager -->
  <include file="$(find-pkg-share uuv_thruster_manager)/launch/thruster_manager.launch">
     <arg name="uuv_name" value="$(var uuv_name)" />
     <arg name="model_name" value="$(var model_name)" />
     <arg name="output_dir" value="$(var thruster_manager_output_dir)" />
     <arg name="config_file" value="$(var thruster_manager_config_file)" />
     <arg name="tam_file" value="$(var tam_file)" />
   </include>

  <!-- This node just reads the trajectory and waypoint topics and publishes
       visualization markers for RViz -->
  <group if="$(var gui_on)">
    <group>
      <push-ros-namespace namespace="$(var uuv_name)"/>
      <node pkg="uuv_control_utils"
            exec="trajectory_marker_publisher.py"
            name="trajectory_marker_publisher"
            output="screen">
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
      </node>
    </group>
  </group>

  <group if="$(var use_params_file)">
    <group>
      <push-ros-namespace namespace="$(var uuv_name)"/>
      <node pkg="uuv_trajectory_control"
            exec="rov_pd_grav_compensation_controller.py"
            name="rov_pd_grav_compensation_controller"
            output="screen"
            if="$(var use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt_ned"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>

        <!-- FIXME Bug due to relative topic under python -->
        <remap from="tf" to="/tf"/>
        <remap from="tf_static" to="/tf_static"/>
        
        <param from="$(var controller_config_file)"/>
        <param from="$(var model_params_file)"/>

        <param name="inertial_frame_id" value="world_ned"/>
      </node>

      <node pkg="uuv_trajectory_control"
            exec="rov_pd_grav_compensation_controller.py"
            name="rov_pd_grav_compensation_controller"
            output="screen"
            unless="$(var use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>

        <!-- FIXME Bug due to relative topic under python -->
        <remap from="tf" to="/tf"/>
        <remap from="tf_static" to="/tf_static"/>
        
        <param from="$(var controller_config_file)"/>
        <param from="$(var model_params_file)"/>
        
        <param name="inertial_frame_id" value="world"/>
      </node>
    </group>
  </group>

  <group unless="$(var use_params_file)">
    <group>
      <push-ros-namespace namespace="$(var uuv_name)"/>
      <node pkg="uuv_trajectory_control"
            exec="rov_pd_grav_compensation_controller.py"
            name="rov_pd_grav_compensation_controller"
            output="screen"
            if="$(var use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt_ned"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>

        <!-- FIXME Bug due to relative topic under python -->
        <remap from="tf" to="/tf"/>
        <remap from="tf_static" to="/tf_static"/>
        
        <param from="$(var model_params_file)"/>
        <!-- Controller parameters -->
        <param name="saturation" value="$(var saturation)"/>
        <param name="Kp" value="[$(var Kp)]"/>
        <param name="Kd" value="[$(var Kd)]"/>
        <param name="inertial_frame_id" value="world_ned"/>
      </node>

      <node pkg="uuv_trajectory_control"
            exec="rov_pd_grav_compensation_controller.py"
            name="rov_pd_grav_compensation_controller"
            output="screen"
            unless="$(var use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>

        <!-- FIXME Bug due to relative topic under python -->
        <remap from="tf" to="/tf"/>
        <remap from="tf_static" to="/tf_static"/>
        
        <rosparam from="$(var model_params_file)"/>
        <!-- Controller parameters -->
        <param name="saturation" value="$(var saturation)"/>
        <param name="Kp" value="[$(var Kp)]"/>
        <param name="Kd" value="[$(var Kd)]"/>
        <param name="inertial_frame_id" value="world"/>
      </node>
    </group>
  </group>

</launch>
