#!/usr/bin/env python3
# Copyright (c) 2020 The Plankton Authors.
# All rights reserved.
#
# This source code is derived from UUV Simulator
# (https://github.com/uuvsimulator/uuv_simulator)
# Copyright (c) 2016-2019 The UUV Simulator Authors
# licensed under the Apache license, Version 2.0
# cf. 3rd-party-licenses.txt file in the root directory of this source tree.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import numpy as np
import os
import casadi

import rclpy
from rclpy.node import Node

from uuv_auv_control_allocator.msg import AUVCommand
from uuv_auv_actuator_interface import ActuatorManager

from plankton_utils.time import time_in_float_sec
from plankton_utils.time import is_sim_time

class AUVControlAllocator(ActuatorManager):
    def __init__(self, name, **kwargs):
        ActuatorManager.__init__(self, name, **kwargs) 
        # Retrieve the output file path to store the CAM
        # matrix for future use
        self.output_dir = None
        if self.has_parameter('output_dir'):
            self.output_dir = self.get_parameter('output_dir').get_parameter_value().string_value
            if not os.path.isdir(self.output_dir):
                raise RuntimeError(
                    'Invalid output directory, output_dir=' + self.output_dir)
            self.get_logger().info('output_dir=' + str(self.output_dir))

        self.update_rate = self.get_parameter('update_rate').value

        if self.update_rate <= 0:
            raise RuntimeError('Update rate must be a positive number')

        self.timeout = self.get_parameter('timeout').value       

        # Control allocation matrix for thruster and fin lift forces
        self.u = casadi.SX.sym('u')
        self.thrust = casadi.SX.sym('thrust')
        self.delta = None
        self.output_tau = casadi.SX.sym('tau', 6, 1)
        self.actuator_model = 0

        self.input_surge_speed = 0.0
        self.input_tau = np.zeros(6)        

        self.init_future.add_done_callback(self._init_class)
    # =========================================================================
    def _init_class(self, future):
        """ 
        Initializes the class. Called as a callback when the parent class 
        is initialized
        """
        try:
            self._init_class_impl()
        except Exception as e:
            self.get_logger().info('Caught exception: ' + repr(e))
    # =========================================================================
    def _init_class_impl(self):
        if not self.update_cam():
            raise RuntimeError('No thruster and/or fins found')
      
        self.sub = self.create_subscription(AUVCommand, "/" + self.namespace + '/control_input', self.control_callback, 10)

        # NB : no spin before, the sim time clock() is automatically 0
        self.last_update = time_in_float_sec(self.get_clock().now())

        self.timer_function = self.create_timer(1.0 / self.update_rate, self.spin_function)

        self.get_logger().info('ControlAllocator: ready')
    # =========================================================================
    def spin_function(self):
        if self.timeout > -1:
            if time_in_float_sec(self.get_clock().now()) - self.last_update > self.timeout:
                self.input_surge_speed = 0.0
                self.input_tau = np.zeros(6)          
        output = self.allocate(self.input_tau, self.input_surge_speed)          
        self.publish_commands(output)
    # =========================================================================
    def update_cam(self):
        """Calculate the control allocation matrix, if one is not given."""
                
        # Build the casadi model
        self.delta = casadi.SX.sym('delta', self.n_fins)
        actuator_model = self.thruster.tam_column.reshape((6, 1)) * self.thrust
        for i in self.fins:
            f_lift = (0.5 * self.fin_config['fluid_density'] * 
                self.fin_config['lift_coefficient'] * self.fin_config['fin_area'] *  
                self.delta[i] * self.u**2)
        
            f_lift = f_lift * self.fins[i].lift_vector
            t_lift = casadi.cross(self.fins[i].pos, f_lift)

            actuator_model += casadi.vertcat(f_lift, t_lift)

        self.cost_function = casadi.norm_2(self.output_tau - actuator_model)
        
        return True

    # =========================================================================
    def allocate(self, tau, u):        
        output = np.zeros(self.n_fins + 1)

        if self.input_surge_speed == 0:
            return output

        if np.linalg.norm(tau) == np.abs(tau[0]):
            output[0] = self.thruster.tam_column[0] * tau[0]
        else:
            model = casadi.substitute(
                self.cost_function, 
                casadi.vertcat(self.output_tau, self.u), 
                tau.tolist() + [u])
                
            nlp = dict(
                x=casadi.vertcat(self.thrust, self.delta),
                f=model)

            opts = {'verbose':False, 'print_time':False, 'ipopt.print_level':0}

            solver = casadi.nlpsol('solver', 'ipopt', nlp, opts)
            sol = solver(
                lbx=[-self.thruster_config['max_thrust']] + [self.fin_lower_limit for _ in range(self.n_fins)],
                ubx=[self.thruster_config['max_thrust']] + [self.fin_upper_limit for _ in range(self.n_fins)])
            
            for i in range(self.n_fins + 1):
                output[i] = sol['x'][i]
        return output

    # =========================================================================
    def control_callback(self, msg):
        self.input_surge_speed = msg.surge_speed
        self.input_tau = np.array([msg.command.force.x, 
                                   msg.command.force.y,
                                   msg.command.force.z,
                                   msg.command.torque.x, 
                                   msg.command.torque.y,
                                   msg.command.torque.z])  

        if 'ned' in msg.header.frame_id:
            self.input_tau[0:3] = np.dot(self.base_link_ned_to_enu, self.input_tau[0:3])
            self.input_tau[4::] = np.dot(self.base_link_ned_to_enu, self.input_tau[4::])
        
        self.last_update = time_in_float_sec(self.get_clock().now())

      
# =============================================================================
def main():
    rclpy.init()

    try:
        sim_time_param = is_sim_time()

        node = AUVControlAllocator('auv_control_allocator', parameter_overrides=[sim_time_param])
        rclpy.spin(node)

    except Exception as e:
        print('AUVControlAllocatoreNode::Exception: ' + str(e))
    finally:
        if rclpy.ok():
            rclpy.shutdown()
    print('Leaving AUVControlAllocatorNode')


# =============================================================================
if __name__ == '__main__':
    main()
        
